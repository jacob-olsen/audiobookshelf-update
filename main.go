package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
)

var multiScan bool = false

func main() {

	localList := openLocal()
	//test stord info
	if localList.ApiKey == "" {
		fmt.Println("api key not set")
		os.Exit(1)
	}
	if localList.URL == "" {
		fmt.Println("URL not set")
		os.Exit(1)
	}

	//test conntion
	if !ping(localList.URL, localList.ApiKey) {
		fmt.Println("cant connet to server")
		os.Exit(1)
	}

	//get book list

	//var info BookList
	//data := getAPI("/api/libraries/" + librayID + "/items")

	//json.Unmarshal(data, &info)

	//fmt.Printf("%+v\n", info)
}

func openLocal() (Data localData) {
	dataByte, err := os.ReadFile("./info.json")
	if errors.Is(err, os.ErrNotExist) {
		saveLocal(Data)
	}
	json.Unmarshal(dataByte, &Data)
	return
}

func saveLocal(data localData) {
	jsonData, _ := json.Marshal(data)
	os.WriteFile("./info.json", jsonData, 0666)
}

func ping(url string, api string) bool {
	//tjek server exist
	data, err := getAPI(url+"/ping", api)
	if err != nil {
		fmt.Println("ping faild")
		return false
	}
	return strings.Contains(string(data), "true")
}

func getBookList(url string, api string, libary string) (pageList localData) {

}

func getAPI(url string, apiKey string) (body []byte, err error) {
	client := &http.Client{}
	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("Authorization", " Bearer "+apiKey)

	resp, err := client.Do(req)

	if err != nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()
	body, err = io.ReadAll(resp.Body)

	return
}

type BookList struct {
	Results []struct {
		ID        string `json:"id"`
		Path      string `json:"path"`
		RelPath   string `json:"relPath"`
		MediaType string `json:"mediaType"`
		Media     struct {
			ID       string `json:"id"`
			Metadata struct {
				Title      string `json:"title"`
				AuthorName string `json:"authorName"`
			} `json:"metadata"`
			NumTracks     int `json:"numTracks"`
			NumAudioFiles int `json:"numAudioFiles"`
			NumChapters   int `json:"numChapters"`
		} `json:"media"`
	} `json:"results"`
	Total int `json:"total"`
}

type localData struct {
	URL    string
	ApiKey string
	Books  []struct {
		ID        string
		PageCount int
	}
}

type AutoGenerated struct {
	ID            string `json:"id"`
	Username      string `json:"username"`
	Type          string `json:"type"`
	MediaProgress []struct {
		ID                        string  `json:"id"`
		UserID                    string  `json:"userId"`
		LibraryItemID             string  `json:"libraryItemId"`
		EpisodeID                 any     `json:"episodeId"`
		MediaItemID               string  `json:"mediaItemId"`
		MediaItemType             string  `json:"mediaItemType"`
		Duration                  float64 `json:"duration"`
		Progress                  float64 `json:"progress"`
		CurrentTime               float64 `json:"currentTime"`
		IsFinished                bool    `json:"isFinished"`
		HideFromContinueListening bool    `json:"hideFromContinueListening"`
		EbookLocation             any     `json:"ebookLocation"`
		EbookProgress             int     `json:"ebookProgress"`
		LastUpdate                int64   `json:"lastUpdate"`
		StartedAt                 int64   `json:"startedAt"`
		FinishedAt                int64   `json:"finishedAt"`
	} `json:"mediaProgress"`
}
